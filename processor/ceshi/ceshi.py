import requests
import pandas as pd
from math import radians, sin, cos, sqrt, atan2

# Define the function to calculate the distance between two points
def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371.0  # approximate radius of earth in km
    lat1_rad = radians(lat1)
    lon1_rad = radians(lon1)
    lat2_rad = radians(lat2)
    lon2_rad = radians(lon2)

    dlon = lon2_rad - lon1_rad
    dlat = lat2_rad - lat1_rad

    a = sin(dlat / 2)**2 + cos(lat1_rad) * cos(lat2_rad) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c
    return distance

# API settings
url = "https://api.map.baidu.com/reverse_geocoding/v3"
ak = "dhW9InMSHHNGhenaSlKnAwjiL91FihCL"

# Create an empty list to store the results
results = []
locations = [
[35.835709, 108.023771],
[35.833773, 108.026119],
[35.833447, 108.026799],
[35.832477, 108.027502],
[35.834005, 108.030161],
[35.834444, 108.02818],
[35.834062, 108.027846],
[35.832299, 108.029808],
[35.830302, 108.029739],
[35.835872, 108.037013],
[35.837661, 108.033265],
[35.837867, 108.032295],
[35.836631, 108.030113],
[35.837276, 108.030132],
[35.839159, 108.032204],
[35.840951, 108.035775],
[35.843169, 108.034725],
[35.855133, 108.033318],
[35.85364, 108.030889],
[35.85033, 108.032239],
[35.849582, 108.029723],
[35.844385, 108.028854],
[35.846643, 108.028161],
[35.847407, 108.02984],
[35.844898, 108.024176],
[35.841405, 108.025441],
[35.840519, 108.025121],
[35.841303, 108.024027],
[35.839703, 108.022766],
[35.839141, 108.02355],
[35.839084, 108.023937],
[35.839673, 108.02502],
[35.837931, 108.019775],
[35.835585, 108.018476],
[35.82392, 108.022173],
[35.836655, 108.027521],
[35.837672, 108.025503],
[35.837075, 108.02532],
[35.838454, 108.021929],
[35.838036, 108.023234],
[35.830434, 108.024013],
[35.82748, 108.024892],
[35.827471, 108.025586],
[35.829194, 108.025931],
[35.828855, 108.025788],
[35.828381, 108.025719],
[35.825016, 108.02524],
[35.824738, 108.025331],
[35.824983, 108.024563],
[35.825185, 108.02412],
[35.823857, 108.023925],
[35.825176, 108.023227],
[35.817611, 108.030706],
[35.818349, 108.027975],
[35.818586, 108.027221],
[35.819323, 108.027061],
[35.812468, 108.040681],
[35.815359, 108.043261],
[35.783204, 108.003325],
[35.802398, 108.001972],
[35.802457, 108.002342],
[35.802156, 108.002562],
[35.801909, 108.003274],
[35.802574, 108.003152],
[35.801682, 108.008748],
[35.805489, 108.006361],
[35.805802, 108.006879],
[35.805112, 108.007463],
[35.807271, 108.010112],
[35.807809, 108.01004],
[35.808975, 108.011773],
[35.809411, 108.013438],
[35.811274, 108.015352],
[35.810534, 108.013764],
[35.808592, 108.01477],
[35.808103, 108.013695],
[35.807804, 108.015903],
[35.805298, 108.018163],
[35.808323, 108.019349],
[35.810434, 108.020466],
[35.810515, 108.021154],
[35.803312, 108.004326],
[35.802926, 108.003719],
[35.813825, 108.019841],
[35.813831, 108.025198],
[35.800655, 108.000751],
[35.802106, 108.000906],
[35.808198, 108.003351],
[35.818668, 108.026588],
[35.818588, 108.025782],
[35.818042, 108.02576],
[35.816148, 108.026351],
[35.819872, 108.025652],
[35.818958, 108.02868],
[35.819749, 108.028762],
[35.819816, 108.027729],
[35.822027, 108.031039],
[35.822368, 108.026415],
[35.820546, 108.027692],
[35.820633, 108.025677],
[35.820682, 108.026533],
[35.82145, 108.026267],
[35.820648, 108.026927],
[35.822658, 108.025992],
[35.822852, 108.028975],
[35.821681, 108.028706],
[35.822579, 108.024034],
[35.821547, 108.024162],
[35.819993, 108.024798],
[35.819655, 108.023909],
[35.818877, 108.025477],
[35.819901, 108.02669],
[35.835897, 108.028644],
[35.825503, 108.023652],
[35.826109, 108.025312],
[35.82646, 108.025674],
[35.825409, 108.025423],
[35.82641, 108.024172],
[35.827106, 108.025583],
[35.825335, 108.026555],
[35.826591, 108.028459],
[35.823778, 108.025921],
[35.823436, 108.026688],
[35.824589, 108.02675],
[35.816781, 108.03267],
[35.817027, 108.025957],
[35.816436, 108.020595],
[35.816943, 108.023513],
[35.83746, 108.026416],
[35.851097, 108.034022],
[35.812651, 108.019999],
[35.791697, 107.998703],
[35.788239, 107.992316],
[35.786767, 107.994355],
[35.784888, 107.996051],
[35.783567, 107.993554],
[35.833942, 107.928447],
[36.123932, 108.686878],
[36.128156, 108.68259],
[35.85848, 108.024717],
[35.986403, 108.057152],
[35.773898, 107.988757],
[35.753931, 107.967759],
[35.709308, 107.963348],
[36.116316, 108.666767],
[35.737736, 107.885695],
[35.927549, 107.985911],
[35.978803, 108.048926],
[35.97882, 108.05182],
[35.834722, 108.027119]
]
# Loop through the locations
for location in locations:
    lat, lon = location

    # API parameters
    params = {
        "ak": ak,
        "output": "json",
        "coordtype": "bd09ll",
        "extensions_poi": "1",
        "location": f"{lat},{lon}",
        "radius": "200",
        "poi_types": "房地产|政府机构"
    }

    # Make the API request
    response = requests.get(url=url, params=params)

    if response:
        data = response.json()
        addressComponent = data.get("result", {}).get("addressComponent", [])
        pois = data.get("result", {}).get("pois", [])
        if pois:
            name = pois[0]["name"]
            points = pois[0]["point"]
            distance = calculate_distance(lat, lon, points["y"], points["x"])
            road_name = addressComponent["street"]
            road_no = addressComponent["street_number"]
            print(name, points)
            results.append({"Name": name,"road_name": road_name,"road_no": road_no, "Points": f"{points['y']},{points['x']}", "Distance (km)": distance})
        else:
            results.append({"Name": "N/A","road_name": "N/A","road_no":"N/A", "Points": "N/A", "Distance (km)":"N/A"})
    else:
        results.append({"Name": "N/A", "road_name": "N/A","road_no":"N/A","Points": "N/A", "Distance (km)":"N/A"})
    

# Convert the results to a DataFrame
df = pd.DataFrame(results)

# Write to excel
df.to_excel("D:/最近建筑/location_results.xlsx", index=False)